import type { Metadata } from "next";
import { Poppins, Noto_Sans } from "next/font/google";
import "./globals.css";
import type { ReactNode } from "react";

const poppins = Poppins({
  subsets: ["latin"],
  weight: ["200", "300", "400", "500", "600", "700"],
  variable: "--font-poppins",
});

const notoSans = Noto_Sans({
  subsets: ["latin"],
  weight: ["100", "900"],
  variable: "--font-noto-sans",
});

export const metadata: Metadata = {
  title: "Create React App",
  description: "Generated by create next app",
};

function ThemeScript() {
  // Sets the initial theme BEFORE React hydrates to avoid a flash of wrong theme.
  const code = `
    (function(){
      try {
        var stored = localStorage.getItem('theme'); // "light" | "dark" | null
        var sysDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
        var theme = (stored === 'light' || stored === 'dark') ? stored : (sysDark ? 'dark' : 'light');
        var html = document.documentElement;
        html.dataset.theme = theme;               // <html data-theme="dark"> | "light"
        html.style.colorScheme = theme;           // ensure built-in UI matches
        var meta = document.querySelector('meta[name="theme-color"]');
        if (meta) meta.setAttribute('content', theme === 'dark' ? '#0b1220' : '#ffffff');
      } catch (e) {}
    })();
  `;
  return <script dangerouslySetInnerHTML={{ __html: code }} />;
}

export default function RootLayout({
  children,
}: Readonly<{ children: ReactNode }>) {
  return (
    <html
      lang="en"
      suppressHydrationWarning
      className={`${poppins.className} ${poppins.variable} ${notoSans.variable}`}
    >
      <head>
        {/* Base color; updated at runtime by ThemeScript */}
        <meta name="theme-color" content="#ffffff" />
        {/* <ThemeScript /> */}
      </head>
      <body className="antialiased">
        {children}
      </body>
    </html>
  );
}
